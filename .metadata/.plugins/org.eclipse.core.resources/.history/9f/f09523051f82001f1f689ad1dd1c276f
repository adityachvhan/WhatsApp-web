package com.corejavahub.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.corejavahub.exception.ChatException;
import com.corejavahub.exception.UserException;
import com.corejavahub.model.Chat;
import com.corejavahub.model.User;
import com.corejavahub.repository.ChatRepository;

@Service
public class ChatServiceimplementation implements ChatService {

	@Autowired
	private ChatRepository chatRepository;
	@Autowired
	private UserService userService;

	@Override
	public Chat createChat(User reqUser, Integer userId) throws UserException {

		User user = userService.findUserById(userId);

		Chat isChatExist = chatRepository.findSingleChatByUserIds(user, reqUser);

		if (isChatExist != null) {

			return isChatExist;
		}

		Chat chat = new Chat();
		chat.setCreatedBy(reqUser);
		chat.getUsers().add(user);
		chat.getUsers().add(reqUser);

		chat.setGroup(false);

		return chat;
	}

	@Override
	public Chat findChatById(Integer chatId) throws ChatException {

		Optional<Chat> optional = chatRepository.findById(chatId);

		if (optional.isPresent()) {

			return optional.get();
		}
		throw new ChatException("No Chat Found... ");
	}

	@Override
	public List<Chat> findAllChatByUserId(Integer userId) throws UserException {

		User user = userService.findUserById(userId);

		List<Chat> chats = chatRepository.findChatByUserId(user.getId());

		return chats;
	}

	@Override
	public Chat createGroup(GroupChatRequest req, User reqUser) throws UserException, ChatException {

		Chat group = new Chat();
		group.setGroup(true);
		group.setChat_image(req.getChat_image());
		group.setChat_name(req.getChat_name());
		group.setCreatedBy(reqUser);

		for (Integer userId : req.getUserIds()) {

			User user = userService.findUserById(userId);
			group.getUsers().add(user);
		}

//		group.setUsers(null);

		return group;
	}

	@Override
	public Chat addUserToGroup(Integer userId, Integer chatId, User reqUser) throws UserException, ChatException {

		Optional<Chat> opt = chatRepository.findById(chatId);

		User user = userService.findUserById(userId);

		if (opt.isPresent()) {

			Chat chat = opt.get();
			opt.get().getUsers().add(user);
		}

		throw new ChatException("No Chat Found with this id");
	}

	@Override
	public Chat renameGroup(Integer chatId, String groupName, Integer reqUserId) throws ChatException, UserException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Chat removeFromGroup(Integer chatId, Integer userId, Integer reqUser) throws UserException, ChatException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Chat deleteChat(Integer chatId, Integer userId) throws ChatException, UserException {
		// TODO Auto-generated method stub
		return null;
	}

}
